class Solution {
public:
void sort(vector<int>&nums,int low,int mid,int high)
{
    int left=low;
    int right=mid+1;
    vector<int>arr;
    while(left<=mid && right<=high)
    {
        if(nums[left]<=nums[right])
        {
            arr.push_back(nums[left]);
            left++;
        }
        else{
            arr.push_back(nums[right]);
            right++;
        }
    }
    while(left<=mid)
    {
        arr.push_back(nums[left]);
        left++;
    }
    while(right<=high)
    {
        arr.push_back(nums[right]);
        right++;
    }
    for(int i=low;i<=high;i++)
    {
        nums[i]=arr[i-low];
    }
}
int countPairs(vector<int>&nums,int low,int mid,int high)
{
    int cnt=0;
    int right=mid+1;
    for(int i=low;i<=mid;i++)
    {
        while(right<=high && nums[i]>2*(long long)nums[right])
        right++;
        cnt+=(right-(mid+1));
    }
    return cnt;
}
int mergeSort(vector<int>&nums,int low,int high)
{
    int cnt=0;
    if(low>=high)
    return cnt;
    int mid=(low+high)/2;
    cnt+=mergeSort(nums,low,mid);
    cnt+= mergeSort(nums,mid+1,high);
    cnt+=countPairs(nums,low,mid,high);
    sort(nums,low,mid,high);
    return cnt;

}
    int reversePairs(vector<int>& nums) {
       return mergeSort(nums,0,nums.size()-1);
        
    }
};