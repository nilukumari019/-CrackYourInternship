/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode* mergeTwo(ListNode*lists1,ListNode*lists2)
{
    if(lists1==nullptr)
    return lists2;
    if(lists2==nullptr)
    return lists1;
    ListNode*res=new ListNode(-1); // dummy node
        if(lists1->val<lists2->val)
        {
            res->next=lists1;
            lists1=lists1->next;
        }else{
            res->next=lists2;
            lists2=lists2->next;
        }
        ListNode*curr=res;
        while(lists1 && lists2)
        {
            if(lists1->val<lists2->val)
            {
                curr=curr->next;
                curr->next=lists1;
                lists1=lists1->next;
            }else{
                curr=curr->next;
                curr->next=lists2;
                lists2=lists2->next;
            }
        }
        if(lists1!=nullptr)
        {
            curr=curr->next;
            curr->next=lists1;

        }else{
            curr=curr->next;
            curr->next=lists2;

        }
        return res->next;

}
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int n=lists.size();
        if(n==0)
        return nullptr;
        if(n==1)
        return lists[0];
        ListNode*lists1=lists[0];
        for(int i=1;i<n;i++)
        {
            lists1= mergeTwo(lists1,lists[i]);
           
        }
        return lists1;
    }
};