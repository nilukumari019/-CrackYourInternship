//{ Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function template for C++

class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums) {

        // code here
        vector<long long int> ans;
        long long int n=nums.size();
       long long int result=1;
       for(long long int i=0;i<n;i++){
           if(nums[i]!=0){
               result=result*nums[i];
           }
           else{
               result=result*1;
           }
       }

        bool flag=0;
        long long int cnt=0;
       for(long long int i=0;i<n;i++){
          if(nums[i]==0){
              cnt++;
               flag=1;
           }
       }
       if(flag==0){
           for(long long int i=0;i<n;i++){
               ans.push_back(result/nums[i]);
           }
       }
       else if(cnt==1 && flag==1){
           for(long long int i=0;i<n;i++){
               if(nums[i]!=0)
                ans.push_back(0);
               else
                ans.push_back(result);
           }
       }
       else if(cnt>1){
           for(long long int i=0;i<n;i++){
               ans.push_back(0);
           }
       }
      return ans;
    }
};


//{ Driver Code Starts.
int main() {
    int t; // number of test cases
    cin >> t;
    while (t--) {
        int n; // size of the array
        cin >> n;
        vector<long long int> arr(n), vec(n);

        for (int i = 0; i < n; i++) // input the array
        {
            cin >> arr[i];
        }
        Solution obj;
        vec = obj.productExceptSelf(arr); // function call

        for (int i = 0; i < n; i++) // print the output
        {
            cout << vec[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
// } Driver Code Ends